
from __future__ import annotations
import argparse, sys, json, subprocess, shlex, uuid, threading, time
from .config import Config, save_to_env
from .system.analyzer import SystemAnalyzer
from .monitor.stream import monitor_loop
from .telegram.bot import TelegramClient
from .logutil import init_logging, log_event
import logging


def _get_agent(cfg):
    try:
        from .agent import DevOpSysAgent  # type: ignore
        return DevOpSysAgent(cfg)
    except Exception:
        class _Dummy:
            def __init__(self, _cfg): self.cfg=_cfg
            def analyze_and_send_report(self): 
                rep = SystemAnalyzer().analyze(simulate=False)
                md = SystemAnalyzer.render_markdown(rep)
                TelegramClient(self.cfg.telegram_bot_token, self.cfg.telegram_chat_id).send_message(md[:3500])
            def plan(self, goal): return []
            def execute(self, steps, confirm_cb=None): return []
        return _Dummy(cfg)
RUNTIME = {"monitor_enabled": False}

def _exec_command_stream(cmd: str, tg: TelegramClient, chat_id: str, message_id: int, cfg: Config, logger):
    import subprocess, shlex, time, threading, os, signal
    # SUDO: make non-interactive to avoid hanging
    if cfg.sudo_noninteractive and cmd.strip().startswith("sudo ") and " -n " not in cmd:
        cmd = cmd.replace("sudo ", "sudo -n ", 1)
    needs_shell = any(m in cmd for m in ["&&","||",";","|","*","<",">","$(","`"])
    header = f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è—é:\n`{cmd}`\n\n"
    tg.edit_message_text(chat_id, message_id, header + "‚Ä¶")
    logger.info("exec start: %s", cmd)

    try:
        proc = subprocess.Popen(
            cmd if needs_shell else shlex.split(cmd),
            shell=needs_shell,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
        )
    except Exception as e:
        tg.edit_message_text(chat_id, message_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å `{cmd}`: {e}")
        logger.error("exec spawn failed: %s -> %s", cmd, e)
        return

    buf_lines = []
    last_edit = 0.0
    MAX_LEN = 3500
    def flush(force=False):
        nonlocal last_edit
        now = time.time()
        if not force and (now - last_edit) * 1000 < cfg.exec_edit_ms:
            return
        text = header + "```\n" + "".join(buf_lines)[- (MAX_LEN-10) :] + "\n```"
        try:
            tg.edit_message_text(chat_id, message_id, text)
        except Exception:
            pass
        last_edit = now

    try:
        while True:
            line = proc.stdout.readline()
            if not line:
                break
            buf_lines.append(line)
            logger.info("[exec] %s", line.rstrip())
            if len(buf_lines) % cfg.exec_chunk_lines == 0:
                flush()
        proc.wait(timeout=600)
    except Exception as e:
        try:
            proc.kill()
        except Exception:
            pass
        buf_lines.append(f"\n[error] {e}\n")
    finally:
        rc = proc.returncode if proc and proc.poll() is not None else -1
        out = "".join(buf_lines).strip()
        hint = ""
        if "sudo: a password is required" in out or "sudo: no tty present" in out or "sudo: " in out and rc != 0:
            hint = "\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞ sudo-–ø–∞—Ä–æ–ª—å. –í–∫–ª—é—á–µ–Ω–æ `sudo -n` (–Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ). " \
                   "–î–æ–±–∞–≤—å—Ç–µ NOPASSWD –¥–ª—è –Ω—É–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ sudoers –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ sudo."
        text = header + f"–∫–æ–¥={rc}\n```\n{out[- (MAX_LEN-10) :]}\n```" + hint
        tg.edit_message_text(chat_id, message_id, text)
        logger.info("exec done: rc=%s", rc)

PENDING: dict[str, dict[str, str]] = {}

def _format_status(cfg: Config) -> str:
    safe = "‚úÖ SAFE" if cfg.safe_mode else "‚ö†Ô∏è UNSAFE"
    mon = "üì° –í–ö–õ" if RUNTIME.get("monitor_enabled") else "‚èπÔ∏è –í–´–ö–õ"
    sources = ", ".join(cfg.monitor_sources) if cfg.monitor_sources else "‚Äî"
    return ("*–°—Ç–∞—Ç—É—Å devopsys*\n"
            f"- –†–µ–∂–∏–º: {safe}\n"
            f"- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {mon}\n"
            f"- –ò—Å—Ç–æ—á–Ω–∏–∫–∏: `{sources}`\n"
            f"- –ò–Ω—Ç–µ—Ä–≤–∞–ª: {cfg.monitor_interval_sec}—Å")

def _build_status_kb(cfg: Config) -> list[list[dict]]:
    return [
        [{"text": "SAFE: ON" if cfg.safe_mode else "SAFE: OFF", "callback_data": "safe:toggle"}],
        [{"text": "MONITOR: ON" if RUNTIME.get("monitor_enabled") else "MONITOR: OFF", "callback_data": "mon:toggle"}],
        [{"text": "üõ† –ò—Å—Ç–æ—á–Ω–∏–∫–∏", "callback_data": "src:menu"}],
        [{"text": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ .env", "callback_data": "cfg:save"}],
    ]

def _run_server():
    from .web.app import run_server as _rs  # lazy import
    _rs()

def _start_bot_loop(cfg: Config) -> None:
    logger = logging.getLogger('devopsys')
    tg = TelegramClient(cfg.telegram_bot_token, cfg.telegram_chat_id)
    def handle(update: dict) -> None:
        if "message" in update:
            msg = update["message"]
            text = msg.get("text","").strip()

            if text.startswith("/start") or text.startswith("/menu"):
                tg.send_reply_keyboard("*–ö–æ–º–∞–Ω–¥—ã*:", [["/analyze","/snapshot"], ["/ask —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å htop"], ["/safe_on","/safe_off"], ["/enable_monitor","/disable_monitor"], ["/status"], ["/help"]])
                tg.send_message(_format_status(cfg))
                return

            if text.startswith("/status"):
                tg.send_message(_format_status(cfg))
                tg.send_inline_keyboard("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", _build_status_kb(cfg))
                return

            if text.startswith("/help"):
                tg.send_message("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/analyze ‚Äî –æ—Ç—á—ë—Ç\n/snapshot ‚Äî —Ä–∞–∑–æ–≤—ã–π —Å–Ω–∏–º–æ–∫\n/ask <–∑–∞–¥–∞—á–∞> ‚Äî –Ω–µ–π—Ä–æ-–∞–≥–µ–Ω—Ç\n/status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ SAFE/–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n/safe_on|/safe_off ‚Äî —Ä–µ–∂–∏–º –∞–≥–µ–Ω—Ç–∞\n/enable_monitor|/disable_monitor ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                return

            if text.startswith("/safe_on"):
                cfg.safe_mode = True
                tg.send_message("SAFE —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
                return

            if text.startswith("/safe_off"):
                cfg.safe_mode = False
                tg.send_message("SAFE —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω")
                return

            if text.startswith("/enable_monitor"):
                RUNTIME["monitor_enabled"] = True
                tg.send_message("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –í–ö–õ")
                return

            if text.startswith("/disable_monitor"):
                RUNTIME["monitor_enabled"] = False
                tg.send_message("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –í–´–ö–õ")
                return

            if text.startswith("/snapshot"):
                from .monitor.stream import snapshot
                tg.send_message(snapshot(cfg.monitor_sources))
                return
            if text.startswith("/ask"):
                logger.info("/ask received: %s", text)
                parts = text.split(" ", 1)
                if len(parts) == 1 or not parts[1].strip():
                    help_text = (
                        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ask <–∑–∞–¥–∞—á–∞>`\n"
                        "–ü—Ä–∏–º–µ—Ä—ã:\n"
                        "‚Ä¢ `/ask —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å htop`\n"
                        "‚Ä¢ `/ask —Å–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–∑ Windows 11`\n"
                        "‚Ä¢ `/ask –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å docker`\n\n"
                        "–°–æ–≤–µ—Ç: –≤–∫–ª—é—á–∏ SAFE —á–µ—Ä–µ–∑ `/safe_on`, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —à–∞–≥–∏."
                    )
                    tg.send_message(help_text)
                    return
                goal = parts[1].strip()
                try:
                    from .agents.devops import plan_actions
                    steps = plan_actions(goal, safe_mode=cfg.safe_mode)
                except Exception as e:
                    goal_lc = goal.lower()
                    if any(k in goal_lc for k in ["—Å–æ—Å—Ç–æ—è–Ω–∏–µ","–∞–Ω–∞–ª–∏–∑","state","status"]):
                        rep = SystemAnalyzer().analyze(simulate=False)
                        md = SystemAnalyzer.render_markdown(rep)
                        tg.send_message("*–û—Ç—á—ë—Ç (fallback)*\n" + md[:3500])
                        return
                    msg_err = str(e).strip() or "–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"
                    hint = " –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç langchain-openai."
                    tg.send_message(f"‚ùó –ê–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {msg_err}.{hint}")
                    return
                if not steps:
                    tg.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/–∞–Ωalyze`.")
                    return
                tg.send_message(f"*–ü–ª–∞–Ω –∏–∑ {len(steps)} —à–∞–≥–æ–≤:*\n" + "\n".join([f"{i+1}. `{s['command']}`" for i,s in enumerate(steps)]))
                for st in steps:
                    cmd = st["command"]
                    tok = str(uuid.uuid4())
                    PENDING[tok] = {"cmd": cmd}
                    buttons = [[{"text":"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å","callback_data":f"ok:{tok}"},{"text":"‚õî –û—Ç–º–µ–Ω–∏—Ç—å","callback_data":f"no:{tok}"}]]
                    tg.send_inline_keyboard(f"[AGENT] {st.get('description','step')}\n`{cmd}`", buttons)
                return

            
            if text.startswith("/analyze"):
                rep = SystemAnalyzer().analyze(simulate=False)
                md = SystemAnalyzer.render_markdown(rep)
                tg.send_message("–û—Ç—á—ë—Ç devopsys:\n" + md[:3500])
                return

        if "callback_query" in update:
            logger.debug("callback_query: %s", update.get('callback_query',{}))
            cq = update["callback_query"]
            data = cq.get("data","")
            chat_id = str(cq["message"]["chat"]["id"]) if cq.get("message") else None
            message_id = cq["message"]["message_id"] if cq.get("message") else None
            if data.startswith(("ok:","no:")):
                action, tok = data.split(":",1)
                item = PENDING.pop(tok, None)
                if item:
                    if action == "ok":
                        cmd = item["cmd"]
                        needs_shell = any(m in cmd for m in ["&&","||",";","|","*","<",">","$(","`"])
                        try:
                            proc = subprocess.run(cmd if needs_shell else shlex.split(cmd), shell=needs_shell, capture_output=True, text=True, timeout=600)
                            out = (proc.stdout + "\n" + proc.stderr).strip()
                            text = ("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ:\n"
                                    f"`{cmd}`\n\n"
                                    f"–∫–æ–¥={proc.returncode}\n"
                                    "```\n"
                                    f"{out[:1500]}\n"
                                    "```")
                        except Exception as e:
                            text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ `{cmd}`: {e}"
                    else:
                        text = "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
                else:
                    text = "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."
                if chat_id and message_id:
                    tg.edit_message_text(chat_id, message_id, text)
                tg.answer_callback(cq.get("id",""), "OK")
                return
            if data == "safe:toggle":
                cfg.safe_mode = not cfg.safe_mode
                tg.edit_message_text(chat_id, message_id, _format_status(cfg))
                tg.send_inline_keyboard("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", _build_status_kb(cfg))
                return
            if data == "mon:toggle":
                RUNTIME["monitor_enabled"] = not RUNTIME.get("monitor_enabled")
                tg.edit_message_text(chat_id, message_id, _format_status(cfg))
                tg.send_inline_keyboard("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", _build_status_kb(cfg))
                return
            if data == "cfg:save":
                save_to_env(cfg)
                tg.edit_message_text(chat_id, message_id, _format_status(cfg) + "\n\n*–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ .env*")
                tg.send_inline_keyboard("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", _build_status_kb(cfg))
                return
            if data == "src:menu":
                options = ["top","df","vmstat","free","uptime"]
                rows = []
                for name in options:
                    on = name in cfg.monitor_sources
                    rows.append([{"text": ("‚úÖ "+name) if on else ("‚¨ú "+name), "callback_data": f"src:toggle:{name}"}])
                rows.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "status:back"}])
                tg.edit_message_text(chat_id, message_id, "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
                tg.send_inline_keyboard("–í—ã–±–µ—Ä–∏—Ç–µ:", rows)
                return
            if data.startswith("src:toggle:"):
                name = data.split(":",2)[2]
                if name in cfg.monitor_sources:
                    cfg.monitor_sources = [x for x in cfg.monitor_sources if x != name]
                else:
                    cfg.monitor_sources = cfg.monitor_sources + [name]
                options = ["top","df","vmstat","free","uptime"]
                rows = []
                for n in options:
                    on = n in cfg.monitor_sources
                    rows.append([{"text": ("‚úÖ "+n) if on else ("‚¨ú "+n), "callback_data": f"src:toggle:{n}"}])
                rows.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "status:back"}])
                tg.edit_message_text(chat_id, message_id, "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                tg.send_inline_keyboard("–í—ã–±–µ—Ä–∏—Ç–µ:", rows)
                return
            if data == "status:back":
                tg.edit_message_text(chat_id, message_id, _format_status(cfg))
                tg.send_inline_keyboard("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", _build_status_kb(cfg))
                return

    tg.set_my_commands([
        {"command":"start","description":"–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"},
        {"command":"menu","description":"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞"},
        {"command":"analyze","description":"–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ç—á—ë—Ç"},
        {"command":"snapshot","description":"–†–∞–∑–æ–≤—ã–π —Å–Ω–∏–º–æ–∫"},
        {"command":"ask","description":"–ù–µ–π—Ä–æ-–∞–≥–µ–Ω—Ç"},
        {"command":"safe_on","description":"–í–∫–ª—é—á–∏—Ç—å SAFE"},
        {"command":"safe_off","description":"–í—ã–∫–ª—é—á–∏—Ç—å SAFE"},
        {"command":"status","description":"–°—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"},
    ])
    tg.poll_loop(handle)

def cli_main(argv=None):
    argv = argv or sys.argv[1:]
    p = argparse.ArgumentParser("devopsys")
    sub = p.add_subparsers(dest="cmd", required=True)

    p_an = sub.add_parser("analyze")
    p_an.add_argument("--report", choices=["md","json"], default="md")
    p_an.add_argument("--to", choices=["stdout","telegram","both"], default="stdout")

    p_pi = sub.add_parser("plan-install")
    p_pi.add_argument("goal", help="–¶–µ–ª—å –≤ –≤–∏–¥–µ shell-–∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∑–∞–¥–∞—á–∏")

    sub.add_parser("web")
    sub.add_parser("bot")

    p_mon = sub.add_parser("monitor")
    p_mon.add_argument("action", choices=["start","once","render-unit"])

    p_tg = sub.add_parser("telegram-test")
    p_tg.add_argument("text", nargs="?", default="ping from devopsys")

    p_agent = sub.add_parser("agent")
    p_agent.add_argument("prompt", nargs="+", help="–ó–∞–¥–∞—á–∞ –¥–ª—è DevOps-–∞–≥–µ–Ω—Ç–∞ (LangChain)")

    sub.add_parser("up")

    args = p.parse_args(argv)
    cfg = Config.from_env()
    init_logging(cfg)
    logger = logging.getLogger('devopsys')
    logger.debug('CLI started with args: %s', argv)
    agent = _get_agent(cfg)

    if args.cmd == "analyze":
        log_event(cfg, logging.INFO, "run analyze")
        rep = SystemAnalyzer().analyze(simulate=False)
        if args.report == "md":
            out = SystemAnalyzer.render_markdown(rep)
        else:
            out = json.dumps(rep, ensure_ascii=False, indent=2)
        if args.to in ("stdout","both"):
            print(out)
        if args.to in ("telegram","both"):
            agent.analyze_and_send_report()
        return 0

    if args.cmd == "plan-install":
        log_event(cfg, logging.INFO, f"plan-install: {args.goal}")
        steps = agent.plan(args.goal)
        if cfg.safe_mode:
            for st in steps:
                ans = input(f"[SAFE] {st.description} :: {st.command}\nRun? [y/N] ").strip().lower()
                if ans not in {"y","yes"}:
                    st.command = None
            res = agent.execute(steps, confirm_cb=lambda s: True)
        else:
            res = agent.execute(steps)
        print(json.dumps(res, ensure_ascii=False, indent=2))
        return 0

    if args.cmd == "web":
        log_event(cfg, logging.INFO, "start web")
        _run_server()
        return 0

    if args.cmd == "bot":
        log_event(cfg, logging.INFO, "start bot")
        tg = TelegramClient(cfg.telegram_bot_token, cfg.telegram_chat_id)
        if not (cfg.telegram_bot_token and cfg.telegram_chat_id):
            print("TELEGRAM_* –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")
            return 1
        print("Telegram bot: long polling... (Ctrl+C to stop)")
        _start_bot_loop(cfg)
        return 0

    if args.cmd == "monitor":
        log_event(cfg, logging.INFO, f"monitor {args.action}")
        if args.action == "start":
            monitor_loop(cfg)
        elif args.action == "once":
            from .monitor.stream import snapshot
            print(snapshot(cfg.monitor_sources))
        elif args.action == "render-unit":
            from .system.services import render_systemd_unit
            import getpass, os as _os
            workdir = _os.getcwd()
            exec_start = f"{sys.executable} -m devopsys monitor start"
            unit = render_systemd_unit("devopsys monitor", getpass.getuser(), workdir, exec_start)
            print(unit)
        return 0

    if args.cmd == "telegram-test":
        tg = TelegramClient(cfg.telegram_bot_token, cfg.telegram_chat_id)
        tg.send_message(args.text)
        print("Sent.")
        return 0

    if args.cmd == "agent":
        log_event(cfg, logging.INFO, f"agent: {' '.join(args.prompt)}")
        try:
            from .agents.devops import plan_actions
        except Exception as e:
            print("–ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:", e)
            return 1
        prompt = " ".join(args.prompt)
        steps = plan_actions(prompt, safe_mode=cfg.safe_mode)
        print(json.dumps(steps, ensure_ascii=False, indent=2))
        return 0

    if args.cmd == "up":
        log_event(cfg, logging.INFO, "devopsys up (web+bot+monitor)")
        def web_thread():
            try:
                _run_server()
            except Exception as e:
                print(f"[web] {e}")

        def bot_thread():
            print("[bot] long polling...")
            _start_bot_loop(cfg)

        def monitor_thread():
            from .monitor.stream import snapshot
            tg = TelegramClient(cfg.telegram_bot_token, cfg.telegram_chat_id)
            print("[monitor] loop started")
            while True:
                if RUNTIME.get("monitor_enabled"):
                    msg = snapshot(cfg.monitor_sources)
                    tg.send_message("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:\n" + msg)
                time.sleep(cfg.monitor_interval_sec)

        t_bot = threading.Thread(target=bot_thread, daemon=True); t_bot.start()
        try:
            t_web = threading.Thread(target=web_thread, daemon=True); t_web.start()
        except Exception as e:
            print(f"[web] {e}")
        t_mon = threading.Thread(target=monitor_thread, daemon=True); t_mon.start()

        print("devopsys up: running. Use Telegram /menu to control SAFE & monitor. Ctrl+C to stop.")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("Stopping...")
        return 0

    return 0

if __name__ == "__main__":
    raise SystemExit(cli_main())
